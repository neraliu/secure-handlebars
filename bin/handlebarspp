#!/usr/bin/env node
/* 
Copyright (c) 2015, Yahoo Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.

Authors: Nera Liu <neraliu@yahoo-inc.com>
         Albert Yu <albertyu@yahoo-inc.com>
         Adonis Fung <adon@yahoo-inc.com>
*/
/**
This utility parses the handlebars template file and adds the context-sensitive XSS helper markups
*/
(function() {

    var Promise = require('bluebird'),
        fs = Promise.promisifyAll(require("fs")),
        glob = Promise.promisify(require('glob'))
        argv = require('minimist')(process.argv.slice(2)),
        ContextParserHandlebars = require("../src/context-parser-handlebars.js");

    var file = argv['_'][0], partialsDir, extname;

    // TODO: update the README
    if (!file) {
        console.log("Usage: handlebarspp [-p <partialsDir>][ -e <hbsExtension>][ -s <true for strictMode>][ -c <true for melting partial into template>] <template>");
        process.exit(1);
    }

    // this function will read all the templates into a memory cache
    function getTemplates (dirPath, extname) {
        var cache = {};
        return !dirPath ? Promise.resolve(cache) : glob(dirPath + '*' + extname, {follow: true}).map(function (file) {
            return Promise.join(fs.readFileAsync(file, 'utf8'), function(content) {
                cache[file.replace(dirPath, '').replace(extname, '')] = content;
            });
        }).then(function(){
            return cache;
        }).catch(function(e) {
            console.log("Error reading file", e);
        });
    }

    // this funciton preprocess a template
    function preProcessTemplate (templateContent, partialsCache) {
        return new ContextParserHandlebars({
            printCharEnable: true,
            strictMode: argv['s'] === 'true',
            enablePartialCombine: argv['c'] === 'true',
            partialsCache: partialsCache
        }).analyzeContext(templateContent);
    }

    // append trailing slash if not exists
    partialsDir = argv['p'] || '';
    partialsDir += partialsDir.slice(-1) === '/' ? '' : '/';

    // prefix a dot if not exists
    extname = argv['e'] || '.hbs';
    extname = (extname.charAt(0) === '.' ? '' : '.') + extname;

    // the partial parsing will be supported if the partial can be loaded from memory
    // otherwise this partial parsing will be disabled by default.
    getTemplates(partialsDir, extname).then(function(partialsCache){
        // TODO: use getTemplates() to iterate over all templates for preProcessing
        return Promise.join(fs.readFileAsync(file, 'utf-8'), function(templateContent){
            return preProcessTemplate(templateContent, partialsCache);
        });
    }).then(function(){
        process.exit(0);
    }).catch(function(err) {
        console.log("[ERROR] "+err);
        process.exit(1);
    });

}).call(this);
